package com.ssafy.pjt;

//딱 1개만 만들어지도록 -> 싱글턴 패턴 적용하자
public class PersonManager {
	final int MAX_SIZE = 0; //final : 상수 취급. 더이상 변화 없음. (스네이크_케이스 관례)
	int size = 0; //이것의 용도는?
	private Person[] arr = new Person[100];
	
	
	//1번 : 외부에서 생성하지 못하도록 막아야 한다!
	private PersonManager() {
	}
	
	//2번 : 외부에서 생성하지 못하니 내가 생성해서 가지고 있자
	//4번 : 얘네도 미리 메모리에 올려두자! (static 붙이기)
	private static PersonManager manager = new PersonManager();
	
	//3번 : 내가 만든 Manager를 외부에서 쓸 수 있게 해줘잉!! (접근자)
	//3-1번 : 근데 외부에서 인스턴스 만들 수 없음
	// 		-> static 키워드를 통해 미리 메모리에 올리자!
	public static PersonManager getManager() {
		return manager;
	}
	
	//추가 (1:void, 2:성공여부)
	//
	public void addPerson(Person p) {
		//조건을 걸어! 우리의 최대 관리 범위를 넘어가지 않게
		//직접 100이라는 값 보다는..
		if(size < MAX_SIZE ) {
//			arr[size++] = p; //한 줄로도 가능.
			arr[size] = p;
			size++;	
			System.out.println("잘 들어갔어요~");
		} else {
			System.out.println("더 이상 사람을 관리할 수 없다!");
		}			
//		아래로 표현도 가능
//		if(size < MAX_SIZE ) {
//			arr[size++] = p;
//			return;	
//		} else {
//			System.out.println("더 이상 사람을 관리할 수 없다!");
//		}			
	}
	
	//조회
	
	
	//수정
	
	
	//삭제
	
	
	
}
